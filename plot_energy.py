from ROOT import *
from sys import argv
from glob import glob
import math, re
import getopt

""" Accepts a list of strings of the root files to be read.
    Input Files are generated by Example07.multifit.cc.
    Returns energy distribution histograms for each input file and a histogram
    ploting RMS of these histograms vs. the NSAMPLES that they are plotted with.

    Source: https://github.com/cms-eb-upgrade/vfe-toymc/
"""
def main(infiles):
    # Output file
    outFile = TFile("energy_error_plots.root", "Recreate")
    # The percent error (out of 1) around the histogram that will be checked
    # Done to weed out the many low energy pileup events (usually < 0.2 GeV)
    ERROR = 0.10
    # The number of bins to use in the histogram
    bins = 100

    # Histograms for standard deviations vs. vairous values
    stdDevSampl = TH1F("StdDev_Sample",
                    "Standard Deviation vs. NSAMPLES for NFREQ=25;\
                    NSAMPLES; Standard Deviation",
                    99, 0.5, 99.5)
    stdDevFreq = TH1F("StdDev_Frequency",
                    "Standard Deviation vs. NSAMPLES for NFREQ=25;\
                    NSAMPLES; Standard Deviation",
                    99, 0.5, 99.5)
    stdDevAmp = TH1F("StdDev_Amplitude",
                    "Standard Deviation vs. NSAMPLES for NFREQ=25;\
                    NSAMPLES; Standard Deviation",
                    99, 0.5, 99.5)
    stdDevPU = TH1F("StdDev_PileUp",
                    "Standard Deviation vs. NSAMPLES for NFREQ=25;\
                    NSAMPLES; Standard Deviation",
                    99, 0.5, 99.5)

    # min and max used to modify the displayed range of the histogram
    minSampl = 1000
    maxSampl = 0

    # Accessing each file and making the histograms
    for i, f in enumerate(infiles):
        # Accessing the file
        print "File", i+1, ":", f
        inFile = TFile(f, "Read")
        tree = inFile.Get("RecoAndSim")
        events = tree.GetEntries()

        # Getting and checking the stats for the file
        stats = map(int, re.findall(r'\d+',f))
        # stats = [NSAMPLE, NFEQ, AMP, PU]
        if (stats[0] < minSampl): minSampl = stats[0]
        if (stats[0] > maxSampl): maxSampl = stats[0]

        # Getting the true amplitude of the event
        tree.GetEntry(0)
        trueAmplitude = tree.amplitudeTruth
        print "  Amplitude:", trueAmplitude

        # Making the histogram
        energyHist = TH1F("NSAMPLE:"+str(stats[0])+"_NFREQ:"+str(stats[1])+\
                        "_AMP:"+str(stats[2])+"_PU:"+str(stats[3]),
                         "Error of Signal Amplitude about True Amplitude;\
                        Error (GeV); Frequency",
                        bins, -ERROR*trueAmplitude, ERROR*trueAmplitude)

        # Filling the energy distribution histograms
        for event in range(0, events):
            tree.GetEntry(event)
            for i, sample in enumerate(tree.samplesReco):
                if (sample > (1 - ERROR)*trueAmplitude):
                    energyHist.Fill(sample - trueAmplitude, 1)

        # Filling the standard deviation histograms
        currStdDev = energyHist.GetStdDev()
        currStdDevErr = 1.0 / math.sqrt(2.0*(events - 1.0))*currStdDev
        print "  StdDev:", currStdDev
        print "  Error:", currStdDevErr
        stdDevSampl.SetBinContent(stats[0], currStdDev)
        stdDevFreq.SetBinContent(stats[1], currStdDev)
        stdDevAmp.SetBinContent(stats[2], currStdDev)
        stdDevPU.SetBinContent(stats[3], currStdDev)
        stdDevSampl.SetBinError(stats[0], currStdDevErr)
        stdDevFreq.SetBinError(stats[1], currStdDevErr)
        stdDevAmp.SetBinError(stats[2], currStdDevErr)
        stdDevPU.SetBinError(stats[3], currStdDevErr)
        print "  NSAMPLES:", stats[0]
        # Writing the histogram
        outFile.cd()
        energyHist.Write()

    stdDevSampl.GetXaxis().SetRangeUser(minSampl - 1, maxSampl + 1)
    stdDevFreq.GetXaxis().SetRangeUser(minSampl - 1, maxSampl + 1)
    stdDevAmp.GetXaxis().SetRangeUser(minSampl - 1, maxSampl + 1)
    stdDevPU.GetXaxis().SetRangeUser(minSampl - 1, maxSampl + 1)
    stdDevSampl.Write()
    stdDevFreq.Write()
    stdDevAmp.Write()
    stdDevPU.Write()
    outFile.Close()
    inFile.Close()

if __name__ == "__main__":
    
    args = []
    for arg in argv[1:]:
        args +=glob(arg)
    print args
    main(args)
